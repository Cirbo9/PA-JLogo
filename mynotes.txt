-Il progetto dovrà essere ESTENDIBILE (principio Open-closed) ovvero dovrà
prevedere l'aggiunta di nuovi comandi e nuove funzionalità in modo
facile e veloce (senza modificare il codice esistente)
-Il pattern MVC è applicato e con esso il vantaggio della
MODULARITA' (il progetto è diviso in parti che rappresentano
gruppi di responsabilità diverse)

STRUTTURA PROGETTO

MODEL:
-Canvas
-Cursore
(Linea, Area)

VIEW:
-GUI (JavaFX) -> canvas, disegnare linee
-Text input per comandi

CONTROLLER:
-Interprete dei comandi

INTERPRETE
SCALETTA
0) utente avvia il programma
Per aprire canvas da memoria: utente mette il path del file negli argomenti del comando jlogo
(esempio: jlogo miocanvas.jlogo)
1) utente seleziona risoluzione del canvas
1.5) canvas creato e mostrato
2) utente disegna quello che cazzo vuole
3) utente salva quello che cazzo ha fatto
4) canvas viene tradotto in formato testuale e salvato su file
5) il programma termina

SCALETTA CREAZIONE DI UN ELEMENTO A VIDEO
utente vuole disegnare una linea
2) utente scrive il comando per disegnare una linea
ad esempio "forward 60"
il programma ha due cose da fare
3) programma visualizza la linea sul canvas
4) programma genera istruzioni che compariranno sul file salvato
quindi dopo ogni elemento creato, il programma riporta le modifiche sul file

Main -> App/Interpreter -> Controller
Controller potrà essere esteso con nuovi comandi se uno vuole.
I metodi dentro alle varie classi canvas, line etc dovranno probabilmente essere atomici
per favorire una maggiore modularizzazione, in modo che un utente possa usare i metodi delle classi
per creare nuove features, senza andare a toccare le opzioni più a basso livello relative
al canvas e al disegno in generale

NOTA
        <option name="delegatedBuild" value="false" />
        <option name="testRunner" value="PLATFORM" />
i test e la build sono eseguiti da INTELLIJ (che credo usi comunque gradle) invece di Gradle
come da settaggi di default, per il semplice motivo che gradle non era in grado di eseguire il
build delle mie classi di test

NOTA
ho deciso che le coordinate fanno implementate come float (o double)
le ragioni:
-approssimazione in caso di linee brevi e con inclinazioni "scomode" può essere troppo.. uh.. approssimativa
-devono essere possibili linee lunghe una frazione di un pixel (saranno possibili disegni più dettagliati)
sarà possibile implementare "frazioni di un pixel" su javafx? non lo so

ALLORA
classe App crea il controller! con il canvas vuoto! tanto il canvas non è final. Il controller poi creerà un altro
canvas con la risoluzione giusta! e l'utente potrà anche decidere (durante esecuzione del programma)
di buttare il canvas e crearne uno nuovo